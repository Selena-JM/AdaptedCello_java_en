PartType rbs;
PartType cds;
PartType scar;
PartType promoter;
PartType terminator;
PartType ribozyme;

cds AmeR(.SEQUENCE("ATGAACAAAACCATTGATCAGGTGCGTAAAGGTGATCGTAAAAGCGATCTGCCGGTTCGTCGTCGTCCGCGTCGTAGTGCCGAAGAAACCCGTCGTGATATTCTGGCAAAAGCCGAAGAACTGTTTCGTGAACGTGGTTTTAATGCAGTTGCCATTGCAGATATTGCAAGCGCACTGAATATGAGTCCGGCAAATGTGTTTAAACATTTTAGCAGCAAAAACGCACTGGTTGATGCAATTGGTTTTGGTCAGATTGGTGTTTTTGAACGTCAGATTTGTCCGCTGGATAAAAGCCATGCACCGCTGGATCGTCTGCGTCATCTGGCACGTAATCTGATGGAACAGCATCATCAGGATCATTTCAAACACATACGGGTTTTTATTCAGATCCTGATGACCGCCAAACAGGATATGAAATGTGGCGATTATTACAAAAGCGTGATTGCAAAACTGCTGGCCGAAATTATTCGTGATGGTGTTGAAGCAGGTCTGTATATTGCAACCGATATTCCGGTTCTGGCAGAAACCGTTCTGCATGCACTGACCAGCGTTATTCATCCGGTTCTGATTGCACAAGAAGATATTGGTAATCTGGCAACCCGTTGTGATCAGCTGGTTGATCTGATTGATGCAGGTCTGCGTAATCCGCTGGCAAAATAA"));
cds AmtR(.SEQUENCE("ATGGCAGGCGCAGTTGGTCGTCCGCGTCGTAGTGCACCGCGTCGTGCAGGTAAAAATCCGCGTGAAGAAATTCTGGATGCAAGCGCAGAACTGTTTACCCGTCAGGGTTTTGCAACCACCAGTACCCATCAGATTGCAGATGCAGTTGGTATTCGTCAGGCAAGCCTGTATTATCATTTTCCGAGCAAAACCGAAATCTTTCTGACCCTGCTGAAAAGCACCGTTGAACCGAGCACCGTTCTGGCAGAAGATCTGAGCACCCTGGATGCAGGTCCGGAAATGCGTCTGTGGGCAATTGTTGCAAGCGAAGTTCGTCTGCTGCTGAGCACCAAATGGAATGTTGGTCGTCTGTATCAGCTGCCGATTGTTGGTAGCGAAGAATTTGCAGAATATCATAGCCAGCGTGAAGCACTGACCAATGTTTTTCGTGATCTGGCAACCGAAATTGTTGGTGATGATCCGCGTGCAGAACTGCCGTTTCATATTACCATGAGCGTTATTGAAATGCGTCGCAATGATGGTAAAATTCCGAGTCCGCTGAGCGCAGATAGCCTGCCGGAAACCGCAATTATGCTGGCAGATGCAAGCCTGGCAGTTCTGGGTGCACCGCTGCCTGCAGATCGTGTTGAAAAAACCCTGGAACTGATTAAACAGGCAGATGCAAAATAA"));
cds HlyIIR(.SEQUENCE("ATGAAATACATCCTGTTTGAGGTGTGCGAAATGGGTAAAAGCCGTGAACAGACCATGGAAAATATTCTGAAAGCAGCCAAAAAGAAATTCGGCGAACGTGGTTATGAAGGCACCAGCATTCAAGAAATTACCAAAGAAGCCAAAGTTAACGTTGCAATGGCCAGCTATTACTTTAATGGCAAAGAGAACCTGTACTACGAGGTGTTCAAAAAATACGGTCTGGCAAATGAACTGCCGAACTTTCTGGAAAAAAACCAGTTTAATCCGATTAATGCCCTGCGTGAATATCTGACCGTTTTTACCACCCACATTAAAGAAAATCCGGAAATTGGCACCCTGGCCTATGAAGAAATTATCAAAGAAAGCGCACGCCTGGAAAAAATCAAACCGTATTTTATCGGCAGCTTCGAACAGCTGAAAGAAATTCTGCAAGAGGGTGAAAAACAGGGTGTGTTTCACTTTTTTAGCATCAACCATACCATCCATTGGATTACCAGCATTGTTCTGTTTCCGAAATTCAAAAAATTCATCGATAGCCTGGGTCCGAATGAAACCAATGATACCAATCATGAATGGATGCCGGAAGATCTGGTTAGCCGTATTATTAGCGCACTGACCGATAAACCGAACATTTAA"));
cds PhlF(.SEQUENCE("ATGGCACGTACCCCGAGCCGTAGCAGCATTGGTAGCCTGCGTAGTCCGCATACCCATAAAGCAATTCTGACCAGCACCATTGAAATCCTGAAAGAATGTGGTTATAGCGGTCTGAGCATTGAAAGCGTTGCACGTCGTGCCGGTGCAAGCAAACCGACCATTTATCGTTGGTGGACCAATAAAGCAGCACTGATTGCCGAAGTGTATGAAAATGAAAGCGAACAGGTGCGTAAATTTCCGGATCTGGGTAGCTTTAAAGCCGATCTGGATTTTCTGCTGCGTAATCTGTGGAAAGTTTGGCGTGAAACCATTTGTGGTGAAGCATTTCGTTGTGTTATTGCAGAAGCACAGCTGGACCCTGCAACCCTGACCCAGCTGAAAGATCAGTTTATGGAACGTCGTCGTGAGATGCCGAAAAAACTGGTTGAAAATGCCATTAGCAATGGTGAACTGCCGAAAGATACCAATCGTGAACTGCTGCTGGATATGATTTTTGGTTTTTGTTGGTATCGCCTGCTGACCGAACAGCTGACCGTTGAACAGGATATTGAAGAATTTACCTTCCTGCTGATTAATGGTGTTTGTCCGGGTACACAGCGTTAA"));
cds PsrA(.SEQUENCE("ATGGCACAGAGCGAAACCGTTGAACGTATTCTGGATGCAGCAGAACAGCTGTTTGCAGAACGTGGTTTTGCAGAAACCAGCCTGCGTCTGATTACCAGCAAAGCCGGTGTTAATCTGGCAGCAGTGAATTATCATTTTGGCAGCAAAAAAGCACTGATTCAGGCAGTTTTTAGCCGTTTTCTGGGTCCGTTTTGTGCAAGCCTGGAACGTGAACTGGAACGTCGTCAGGCACGTCCGGAACAGAAACCGAGCCTGGAAGAACTGCTGGAAATGCTGGTTGAACAGGCACTGGCAGTTCAGCCTCGTAGCAATAATGATCTGAGCATTTTTATGTGTCTGCTGGGTCTGGCATTTAGCCAGAGCCAGGGTCATCTGCGTCGTTATCTGGAAGATATGTATGGTAAAGTGTTCCGTCGTTATATGCTGCTGGTTAATGAAGCAGCACCGCGTGTTCCGCCTCTGGAACTGTTTTGGCGTGTTCATTTTATGCTGGGTGCAGCAGCATTTAGCATGAGCGGTATTAAAGCACTGCGTGCAATTGCAGAAACCGATTTTGGTATTAACACCAGCATTGAACAGGTTATGCGTCTGATGGTTCCGTTTCTGGCAGCAGGTATGCGTGCAGATAGCGGTGTTACCGATGAAGCAATGGCAGCAGCACAGCTGCGTCCGCGTAGCAAAACCAGCACCAGCGCAACCACCGCAAAAGCATAA"));
promoter fadD(.SEQUENCE("GTTAACATAATATTA"));
promoter galEP2(.SEQUENCE("ATTAGGCTTATGGTATGAAATAACCATAGCATAACAAAGATGCGAAAAGTGTGACATGGAATAAATTAGTGGAATCGTTTA"));
promoter pHlyIIR(.SEQUENCE("ACCAGGAATCTGAACGATTCGTTACCAATTGACATATTTAAAATTCTTGTTTAAAatgctagc"));
promoter pLuxStar(.SEQUENCE("ATTTCCCCCGTTCAGTTTTGCAGGTGAGTTTTGAACAAATGTATTTCTGCTTTTAATTTGTTCATAACCTTAGGTGGACATTGCACATATTTCCGACGAATAGATCACAATTTATGCTATTTTGATTTTCACGGTTGCGTTTGTTCATGCTCGTAGAGTCAAACTGTGGTTGCCATCACAGATATAAATGAGCAAGAACTGAACAATTGCATTAAAGATTTAAATATGTTCAAAGTGAAGAATGAATT"));
promoter pPhlF(.SEQUENCE("CGACGTACGGTGGAAtctgattcgttaccaattgacATGATACGAAACGTACCGTATCGTTAAGGT"));
rbs A1(.SEQUENCE("AATGTTCCCTAATAATCAGCAAAGAGGTTACTAG"));
rbs F1(.SEQUENCE("CTATGGACTATGTTTTCACATACGAGGGGGATTAG"));
rbs H1(.SEQUENCE("ACCCCCGAG"));
rbs P1(.SEQUENCE("CTATGGACTATGTTTGAAAGGGAGAAATACTAG"));
rbs R1(.SEQUENCE("TTTAATTCGCGGAAGCGCAGAGATAAGGGGTATC"));
ribozyme BydvJ(.SEQUENCE("CTGAagGGTGTCTCAAGGTGCGTACCTTGACTGATGAGTCCGAAAGGACGAAACACCcctctacaaataattttgtttaa"));
ribozyme RiboJ51(.SEQUENCE("CTGAAGTAGTCACCGGCTGTGCTTGCCGGTCTGATGAGCCTGTGAAGGCGAAACTACCTCTACAAATAATTTTGTTTAA"));
ribozyme RiboJ53(.SEQUENCE("CTGAAGCGGTCAACGCATGTGCTTTGCGTTCTGATGAGACAGTGATGTCGAAACCGCCTCTACAAATAATTTTGTTTAA"));
ribozyme RiboJ54(.SEQUENCE("CTGAAGGGGTCAGTTGATGTGCTTTCAACTCTGATGAGTCAGTGATGACGAAACCCCCTCTACAAATAATTTTGTTTAA"));
ribozyme ScmJ(.SEQUENCE("agCGCTGTCTGTACTTGTATCAGTACACTGACGAGTCCCTAAAGGACGAAACACCGcctctacaaataattttgtttaa"));
scar Cscar(.SEQUENCE("aatg"));
scar Escar(.SEQUENCE("gctt"));
scar Fscar(.SEQUENCE("cgct"));
scar Uscar(.SEQUENCE("gggc"));
scar Vscar(.SEQUENCE("tctg"));
scar Xscar(.SEQUENCE("tgtc"));
terminator ECK120015440(.SEQUENCE("tccggcaattAAAAAAGCGGCTAACCACGCCGCTTTTTTtacgtctgca"));
terminator ECK120033736(.SEQUENCE("aacgcatgagAAAGCCCCCGGAAGATCACCTTCCGGGGGCTTTtttattgcgc"));
terminator ECK120033737(.SEQUENCE("ggaaacacagAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTcgaccaaagg"));
terminator L3S2P55(.SEQUENCE("CTCGGTACCAAAGACGAACAATAAGACGCTGAAAAGCGTCTTTTTTCGTTTTGGTCC"));
terminator L3S3P31(.SEQUENCE("CCAATTATTGAACACCCTAACGGGTGTTTTTTTTTTTTTGGTCTACC"));

Device PsrA_device(
   promoter,
   promoter,
   ScmJ,
   R1,
   PsrA,
   ECK120015440
);
Device AmtR_device(
   promoter,
   BydvJ,
   A1,
   AmtR,
   L3S2P55
);
Device AmeR_device(
   promoter,
   promoter,
   RiboJ54,
   F1,
   AmeR,
   L3S3P31
);
Device PhlF_device(
   promoter,
   RiboJ53,
   P1,
   PhlF,
   ECK120033737
);
Device HlyIIR_device(
   promoter,
   RiboJ51,
   H1,
   HlyIIR,
   ECK120033736
);

Rule PsrA_rules ( ON PsrA_device:
   CONTAINS pHlyIIR AND 
   CONTAINS fadD AND
   ALL_FORWARD
);
Rule AmtR_rules ( ON AmtR_device:
   CONTAINS fadD AND
   ALL_FORWARD
);
Rule AmeR_rules ( ON AmeR_device:
   CONTAINS pPhlF AND 
   CONTAINS fadD AND 
   STARTSWITH pPhlF AND
   ALL_FORWARD
);
Rule PhlF_rules ( ON PhlF_device:
   CONTAINS pLuxStar AND
   ALL_FORWARD
);
Rule HlyIIR_rules ( ON HlyIIR_device:
   CONTAINS galEP2 AND
   ALL_FORWARD
);


PsrA_devices    = product(PsrA_device);
AmtR_devices    = product(AmtR_device);
AmeR_devices    = product(AmeR_device);
PhlF_devices    = product(PhlF_device);
HlyIIR_devices  = product(HlyIIR_device);

Device gate_PsrA();
Device gate_AmtR();
Device gate_AmeR();
Device gate_PhlF();
Device gate_HlyIIR();

Device circuit();

Rule allRules( ON circuit:
   gate_PsrA    EXACTLY 1 AND 
   gate_AmtR    EXACTLY 1 AND 
   gate_AmeR    EXACTLY 1 AND 
   gate_PhlF    EXACTLY 1 AND 
   gate_HlyIIR  EXACTLY 1 AND 
   gate_PhlF BEFORE gate_AmeR AND 
   gate_PhlF BEFORE gate_PsrA AND 
   gate_PhlF BEFORE gate_HlyIIR AND 
   gate_PhlF BEFORE gate_AmtR AND 
   gate_AmeR BEFORE gate_PsrA AND 
   gate_AmeR BEFORE gate_HlyIIR AND 
   gate_AmeR BEFORE gate_AmtR AND 
   gate_PsrA BEFORE gate_HlyIIR AND 
   gate_PsrA BEFORE gate_AmtR AND 
   gate_HlyIIR BEFORE gate_AmtR AND 
   ALL_FORWARD AND 
   ALL_FORWARD AND 
   Escar        EXACTLY 1 AND 
   Xscar        EXACTLY 1 AND 
   Vscar        EXACTLY 1 AND 
   Uscar        EXACTLY 1 AND 
   Fscar        EXACTLY 1 AND 
   Cscar        EXACTLY 1 AND 
   FORWARD Escar AND 
   FORWARD Xscar AND 
   FORWARD Vscar AND 
   FORWARD Uscar AND 
   FORWARD Fscar AND 
   FORWARD Cscar AND 
   [0] EQUALS Escar AND 
   [2] EQUALS Xscar AND 
   [4] EQUALS Vscar AND 
   [6] EQUALS Uscar AND 
   [8] EQUALS Fscar AND 
   [10] EQUALS Cscar
);

Array allResults;

for(num i1=0;  i1<sizeof(PsrA_devices);    i1=i1+1) {
for(num i2=0;  i2<sizeof(AmtR_devices);    i2=i2+1) {
for(num i3=0;  i3<sizeof(AmeR_devices);    i3=i3+1) {
for(num i4=0;  i4<sizeof(PhlF_devices);    i4=i4+1) {
for(num i5=0;  i5<sizeof(HlyIIR_devices);  i5=i5+1) {

gate_PsrA    = PsrA_devices[i1];
gate_AmtR    = AmtR_devices[i2];
gate_AmeR    = AmeR_devices[i3];
gate_PhlF    = PhlF_devices[i4];
gate_HlyIIR  = HlyIIR_devices[i5];

Device circuit(
   gate_PsrA,
   gate_AmtR,
   gate_AmeR,
   gate_PhlF,
   gate_HlyIIR,
   Escar,
   Xscar,
   Vscar,
   Uscar,
   Fscar,
   Cscar
);

result = permute(circuit);

allResults = allResults + result;

}
}
}
}
}
