PartType rbs;
PartType cds;
PartType scar;
PartType promoter;
PartType terminator;
PartType ribozyme;

cds AmtR(.SEQUENCE("ATGGCAGGCGCAGTTGGTCGTCCGCGTCGTAGTGCACCGCGTCGTGCAGGTAAAAATCCGCGTGAAGAAATTCTGGATGCAAGCGCAGAACTGTTTACCCGTCAGGGTTTTGCAACCACCAGTACCCATCAGATTGCAGATGCAGTTGGTATTCGTCAGGCAAGCCTGTATTATCATTTTCCGAGCAAAACCGAAATCTTTCTGACCCTGCTGAAAAGCACCGTTGAACCGAGCACCGTTCTGGCAGAAGATCTGAGCACCCTGGATGCAGGTCCGGAAATGCGTCTGTGGGCAATTGTTGCAAGCGAAGTTCGTCTGCTGCTGAGCACCAAATGGAATGTTGGTCGTCTGTATCAGCTGCCGATTGTTGGTAGCGAAGAATTTGCAGAATATCATAGCCAGCGTGAAGCACTGACCAATGTTTTTCGTGATCTGGCAACCGAAATTGTTGGTGATGATCCGCGTGCAGAACTGCCGTTTCATATTACCATGAGCGTTATTGAAATGCGTCGCAATGATGGTAAAATTCCGAGTCCGCTGAGCGCAGATAGCCTGCCGGAAACCGCAATTATGCTGGCAGATGCAAGCCTGGCAGTTCTGGGTGCACCGCTGCCTGCAGATCGTGTTGAAAAAACCCTGGAACTGATTAAACAGGCAGATGCAAAATAA"));
cds BM3R1(.SEQUENCE("ATGGAAAGCACCCCGACCAAACAGAAAGCAATTTTTAGCGCAAGCCTGCTGCTGTTTGCAGAACGTGGTTTTGATGCAACCACCATGCCGATGATTGCAGAAAATGCAAAAGTTGGTGCAGGCACCATTTATCGCTATTTCAAAAACAAAGAAAGCCTGGTGAACGAACTGTTTCAGCAGCATGTTAATGAATTTCTGCAGTGTATTGAAAGCGGTCTGGCAAATGAACGTGATGGTTATCGTGATGGCTTTCATCACATTTTTGAAGGTATGGTGACCTTTACCAAAAATCATCCGCGTGCACTGGGTTTTATCAAAACCCATAGCCAGGGCACCTTTCTGACCGAAGAAAGCCGTCTGGCATATCAGAAACTGGTTGAATTTGTGTGCACCTTTTTTCGTGAAGGTCAGAAACAGGGTGTGATTCGTAATCTGCCGGAAAATGCACTGATTGCAATTCTGTTTGGCAGCTTTATGGAAGTGTATGAAATGATCGAGAACGATTATCTGAGCCTGACCGATGAACTGCTGACCGGTGTTGAAGAAAGCCTGTGGGCAGCACTGAGCCGTCAGAGCTAA"));
cds BetI(.SEQUENCE("ATGCCGAAACTGGGTATGCAGAGCATTCGTCGTCGTCAGCTGATTGATGCAACCCTGGAAGCAATTAATGAAGTTGGTATGCATGATGCAACCATTGCACAGATTGCACGTCGTGCCGGTGTTAGCACCGGTATTATTAGCCATTATTTCCGCGATAAAAACGGTCTGCTGGAAGCAACCATGCGTGATATTACCAGCCAGCTGCGTGATGCAGTTCTGAATCGTCTGCATGCACTGCCGCAGGGTAGCGCAGAACAGCGTCTGCAGGCAATTGTTGGTGGTAATTTTGATGAAACCCAGGTTAGCAGCGCAGCAATGAAAGCATGGCTGGCATTTTGGGCAAGCAGCATGCATCAGCCGATGCTGTATCGTCTGCAGCAGGTTAGCAGTCGTCGTCTGCTGAGCAATCTGGTTAGCGAATTTCGTCGTGAACTGCCTCGTGAACAGGCACAAGAGGCAGGTTATGGTCTGGCAGCACTGATTGATGGTCTGTGGCTGCGTGCAGCACTGAGCGGTAAACCGCTGGATAAAACCCGTGCAAATAGCCTGACCCGTCATTTTATCACCCAGCATCTGCCGACCGATTAA"));
cds PhlF(.SEQUENCE("ATGGCACGTACCCCGAGCCGTAGCAGCATTGGTAGCCTGCGTAGTCCGCATACCCATAAAGCAATTCTGACCAGCACCATTGAAATCCTGAAAGAATGTGGTTATAGCGGTCTGAGCATTGAAAGCGTTGCACGTCGTGCCGGTGCAAGCAAACCGACCATTTATCGTTGGTGGACCAATAAAGCAGCACTGATTGCCGAAGTGTATGAAAATGAAAGCGAACAGGTGCGTAAATTTCCGGATCTGGGTAGCTTTAAAGCCGATCTGGATTTTCTGCTGCGTAATCTGTGGAAAGTTTGGCGTGAAACCATTTGTGGTGAAGCATTTCGTTGTGTTATTGCAGAAGCACAGCTGGACCCTGCAACCCTGACCCAGCTGAAAGATCAGTTTATGGAACGTCGTCGTGAGATGCCGAAAAAACTGGTTGAAAATGCCATTAGCAATGGTGAACTGCCGAAAGATACCAATCGTGAACTGCTGCTGGATATGATTTTTGGTTTTTGTTGGTATCGCCTGCTGACCGAACAGCTGACCGTTGAACAGGATATTGAAGAATTTACCTTCCTGCTGATTAATGGTGTTTGTCCGGGTACACAGCGTTAA"));
cds PsrA(.SEQUENCE("ATGGCACAGAGCGAAACCGTTGAACGTATTCTGGATGCAGCAGAACAGCTGTTTGCAGAACGTGGTTTTGCAGAAACCAGCCTGCGTCTGATTACCAGCAAAGCCGGTGTTAATCTGGCAGCAGTGAATTATCATTTTGGCAGCAAAAAAGCACTGATTCAGGCAGTTTTTAGCCGTTTTCTGGGTCCGTTTTGTGCAAGCCTGGAACGTGAACTGGAACGTCGTCAGGCACGTCCGGAACAGAAACCGAGCCTGGAAGAACTGCTGGAAATGCTGGTTGAACAGGCACTGGCAGTTCAGCCTCGTAGCAATAATGATCTGAGCATTTTTATGTGTCTGCTGGGTCTGGCATTTAGCCAGAGCCAGGGTCATCTGCGTCGTTATCTGGAAGATATGTATGGTAAAGTGTTCCGTCGTTATATGCTGCTGGTTAATGAAGCAGCACCGCGTGTTCCGCCTCTGGAACTGTTTTGGCGTGTTCATTTTATGCTGGGTGCAGCAGCATTTAGCATGAGCGGTATTAAAGCACTGCGTGCAATTGCAGAAACCGATTTTGGTATTAACACCAGCATTGAACAGGTTATGCGTCTGATGGTTCCGTTTCTGGCAGCAGGTATGCGTGCAGATAGCGGTGTTACCGATGAAGCAATGGCAGCAGCACAGCTGCGTCCGCGTAGCAAAACCAGCACCAGCGCAACCACCGCAAAAGCATAA"));
promoter fadD(.SEQUENCE("GTTAACATAATATTA"));
promoter galEP2(.SEQUENCE("ATTAGGCTTATGGTATGAAATAACCATAGCATAACAAAGATGCGAAAAGTGTGACATGGAATAAATTAGTGGAATCGTTTA"));
promoter pAmtR(.SEQUENCE("CTTGTCCAACCAAATGATTCGTTACCAATTGACAGTTTCTATCGATCTATAGATAATGCTAGC"));
promoter pLuxStar(.SEQUENCE("ATTTCCCCCGTTCAGTTTTGCAGGTGAGTTTTGAACAAATGTATTTCTGCTTTTAATTTGTTCATAACCTTAGGTGGACATTGCACATATTTCCGACGAATAGATCACAATTTATGCTATTTTGATTTTCACGGTTGCGTTTGTTCATGCTCGTAGAGTCAAACTGTGGTTGCCATCACAGATATAAATGAGCAAGAACTGAACAATTGCATTAAAGATTTAAATATGTTCAAAGTGAAGAATGAATT"));
promoter pPhlF(.SEQUENCE("CGACGTACGGTGGAAtctgattcgttaccaattgacATGATACGAAACGTACCGTATCGTTAAGGT"));
rbs A1(.SEQUENCE("AATGTTCCCTAATAATCAGCAAAGAGGTTACTAG"));
rbs B2(.SEQUENCE("CTATGGACTATGTTTTTCAAAGACGAAAAACTACTAG"));
rbs E1(.SEQUENCE("CCCCCCGAGGAGTAGCAC"));
rbs P1(.SEQUENCE("CTATGGACTATGTTTGAAAGGGAGAAATACTAG"));
rbs R1(.SEQUENCE("TTTAATTCGCGGAAGCGCAGAGATAAGGGGTATC"));
ribozyme BydvJ(.SEQUENCE("CTGAagGGTGTCTCAAGGTGCGTACCTTGACTGATGAGTCCGAAAGGACGAAACACCcctctacaaataattttgtttaa"));
ribozyme RiboJ53(.SEQUENCE("CTGAAGCGGTCAACGCATGTGCTTTGCGTTCTGATGAGACAGTGATGTCGAAACCGCCTCTACAAATAATTTTGTTTAA"));
ribozyme RiboJ57(.SEQUENCE("CTGAAGAAGTCAATTAATGTGCTTTTAATTCTGATGAGTCGGTGACGACGAAACTTCCTCTACAAATAATTTTGTTTAA"));
ribozyme SarJ(.SEQUENCE("CTGAGACTGTCGCCGGATGTGTATCCGACCTGACGATGGCCCAAAAGGGCCGAAACAGTCCTCTACAAATAATTTTGTTTAA"));
ribozyme ScmJ(.SEQUENCE("agCGCTGTCTGTACTTGTATCAGTACACTGACGAGTCCCTAAAGGACGAAACACCGcctctacaaataattttgtttaa"));
scar Cscar(.SEQUENCE("aatg"));
scar Escar(.SEQUENCE("gctt"));
scar Fscar(.SEQUENCE("cgct"));
scar Uscar(.SEQUENCE("gggc"));
scar Vscar(.SEQUENCE("tctg"));
scar Xscar(.SEQUENCE("tgtc"));
terminator ECK120015440(.SEQUENCE("tccggcaattAAAAAAGCGGCTAACCACGCCGCTTTTTTtacgtctgca"));
terminator ECK120033737(.SEQUENCE("ggaaacacagAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTcgaccaaagg"));
terminator L3S2P11(.SEQUENCE("CTCGGTACCAAATTCCAGAAAAGAGACGCTTTCGAGCGTCTTTTTTCGTTTTGGTCC"));
terminator L3S2P55(.SEQUENCE("CTCGGTACCAAAGACGAACAATAAGACGCTGAAAAGCGTCTTTTTTCGTTTTGGTCC"));
terminator L3S3P11(.SEQUENCE("CCAATTATTGAACACCCTTCGGGGTGTTTTTTTGTTTCTGGTCTACC"));

Device BM3R1_device(
   promoter,
   promoter,
   SarJ,
   B2,
   BM3R1,
   L3S2P11
);
Device PsrA_device(
   promoter,
   ScmJ,
   R1,
   PsrA,
   ECK120015440
);
Device AmtR_device(
   promoter,
   BydvJ,
   A1,
   AmtR,
   L3S2P55
);
Device PhlF_device(
   promoter,
   RiboJ53,
   P1,
   PhlF,
   ECK120033737
);
Device BetI_device(
   promoter,
   promoter,
   RiboJ57,
   E1,
   BetI,
   L3S3P11
);

Rule BM3R1_rules ( ON BM3R1_device:
   CONTAINS pAmtR AND 
   CONTAINS fadD AND
   ALL_FORWARD
);
Rule PsrA_rules ( ON PsrA_device:
   CONTAINS fadD AND
   ALL_FORWARD
);
Rule AmtR_rules ( ON AmtR_device:
   CONTAINS galEP2 AND
   ALL_FORWARD
);
Rule PhlF_rules ( ON PhlF_device:
   CONTAINS pLuxStar AND
   ALL_FORWARD
);
Rule BetI_rules ( ON BetI_device:
   CONTAINS pPhlF AND 
   CONTAINS fadD AND 
   STARTSWITH pPhlF AND
   ALL_FORWARD
);


BM3R1_devices   = product(BM3R1_device);
PsrA_devices    = product(PsrA_device);
AmtR_devices    = product(AmtR_device);
PhlF_devices    = product(PhlF_device);
BetI_devices    = product(BetI_device);

Device gate_BM3R1();
Device gate_PsrA();
Device gate_AmtR();
Device gate_PhlF();
Device gate_BetI();

Device circuit();

Rule allRules( ON circuit:
   gate_BM3R1   EXACTLY 1 AND 
   gate_PsrA    EXACTLY 1 AND 
   gate_AmtR    EXACTLY 1 AND 
   gate_PhlF    EXACTLY 1 AND 
   gate_BetI    EXACTLY 1 AND 
   gate_PhlF BEFORE gate_BM3R1 AND 
   gate_PhlF BEFORE gate_BetI AND 
   gate_PhlF BEFORE gate_PsrA AND 
   gate_PhlF BEFORE gate_AmtR AND 
   gate_BM3R1 BEFORE gate_BetI AND 
   gate_BM3R1 BEFORE gate_PsrA AND 
   gate_BM3R1 BEFORE gate_AmtR AND 
   gate_BetI BEFORE gate_PsrA AND 
   gate_BetI BEFORE gate_AmtR AND 
   gate_PsrA BEFORE gate_AmtR AND 
   ALL_FORWARD AND 
   ALL_FORWARD AND 
   Escar        EXACTLY 1 AND 
   Xscar        EXACTLY 1 AND 
   Vscar        EXACTLY 1 AND 
   Uscar        EXACTLY 1 AND 
   Fscar        EXACTLY 1 AND 
   Cscar        EXACTLY 1 AND 
   FORWARD Escar AND 
   FORWARD Xscar AND 
   FORWARD Vscar AND 
   FORWARD Uscar AND 
   FORWARD Fscar AND 
   FORWARD Cscar AND 
   [0] EQUALS Escar AND 
   [2] EQUALS Xscar AND 
   [4] EQUALS Vscar AND 
   [6] EQUALS Uscar AND 
   [8] EQUALS Fscar AND 
   [10] EQUALS Cscar
);

Array allResults;

for(num i1=0;  i1<sizeof(BM3R1_devices);   i1=i1+1) {
for(num i2=0;  i2<sizeof(PsrA_devices);    i2=i2+1) {
for(num i3=0;  i3<sizeof(AmtR_devices);    i3=i3+1) {
for(num i4=0;  i4<sizeof(PhlF_devices);    i4=i4+1) {
for(num i5=0;  i5<sizeof(BetI_devices);    i5=i5+1) {

gate_BM3R1   = BM3R1_devices[i1];
gate_PsrA    = PsrA_devices[i2];
gate_AmtR    = AmtR_devices[i3];
gate_PhlF    = PhlF_devices[i4];
gate_BetI    = BetI_devices[i5];

Device circuit(
   gate_BM3R1,
   gate_PsrA,
   gate_AmtR,
   gate_PhlF,
   gate_BetI,
   Escar,
   Xscar,
   Vscar,
   Uscar,
   Fscar,
   Cscar
);

result = permute(circuit);

allResults = allResults + result;

}
}
}
}
}
